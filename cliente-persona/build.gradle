plugins {
	id 'java'
	id 'war'
	id 'org.springframework.boot' version '3.2.5'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'com.bmuschko.docker-remote-api' version '9.4.0'
}

//import com.bmuschko.gradle.docker.tasks.image.*
//import com.bmuschko.gradle.docker.tasks.container.*
/*
docker {
	url = 'unix:///Users/lfhernandez/.docker/run/docker-cli-api.sock'
	registryCredentials {
		url = 'https://index.docker.io/v1/'
		username = 'XXXX'
		password = 'XXXX'
	}
}
*/
group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = JavaVersion.VERSION_17
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2023.0.1")
}
// apply plugin: 'com.bmuschko.docker-remote-api'

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	//developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	runtimeOnly 'org.postgresql:postgresql'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

/*
task createDockerfile(type: Dockerfile) {
	from 'openjdk:11-jre-slim'
	copyFile 'build/libs/devsutestclientepersona-0.0.1-SNAPSHOT.jar', '/app/app.jar'
	entryPoint 'java'
	defaultCommand '-jar', '/app/app.jar'
	exposePort 8080
}

task buildDockerImage(type: DockerBuildImage) {
	dependsOn createDockerfile
	inputDir = layout.buildDirectory.dir("docker")
	images = ['lfhernandezb/devsu-cli-per:latest']
}

task pushDockerImage(type: DockerPushImage) {
	dependsOn buildDockerImage
	imageName = 'lfhernandezb/devsu-cli-per'
}

task stopDockerContainer(type: DockerStopContainer) {
	targetContainerId('devsu-cli-per')
	onError { exception -> handleError(exception) }
}

task removeDockerContainer(type: DockerRemoveContainer) {
	dependsOn stopDockerContainer
	targetContainerId('devsu-cli-per')
	onError { exception -> handleError(exception) }
}

task createDockerContainer(type: DockerCreateContainer) {
	dependsOn buildDockerImage, removeDockerContainer
	targetImageId buildDockerImage.getImageId()
	containerName = 'devsu-cli-per'
	hostConfig.portBindings = ['8080:8080']
}

task startDockerContainer(type: DockerStartContainer) {
	dependsOn createDockerContainer
	targetContainerId { createDockerContainer.getContainerId() }
}
*/
